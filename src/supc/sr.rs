#[doc = "Register `SR` reader"]
pub type R = crate::R<SrSpec>;
#[doc = "VDDCORE Supply Monitor Reset Status (cleared on read)\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Corsmrstsselect {
    #[doc = "0: No VDDCORE Supply Monitor reset event has been detected since the last read of the SUPC_SR."]
    No = 0,
    #[doc = "1: At least one VDDCORE Supply Monitor reset event has been detected since the last read of the SUPC_SR."]
    Present = 1,
}
impl From<Corsmrstsselect> for bool {
    #[inline(always)]
    fn from(variant: Corsmrstsselect) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `CORSMRSTS` reader - VDDCORE Supply Monitor Reset Status (cleared on read)"]
pub type CorsmrstsR = crate::BitReader<Corsmrstsselect>;
impl CorsmrstsR {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Corsmrstsselect {
        match self.bits {
            false => Corsmrstsselect::No,
            true => Corsmrstsselect::Present,
        }
    }
    #[doc = "No VDDCORE Supply Monitor reset event has been detected since the last read of the SUPC_SR."]
    #[inline(always)]
    pub fn is_no(&self) -> bool {
        *self == Corsmrstsselect::No
    }
    #[doc = "At least one VDDCORE Supply Monitor reset event has been detected since the last read of the SUPC_SR."]
    #[inline(always)]
    pub fn is_present(&self) -> bool {
        *self == Corsmrstsselect::Present
    }
}
#[doc = "32 kHz Oscillator Selection Status\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Tdoscselselect {
    #[doc = "0: The timing domain slow clock, TD_SLCK, is generated by the slow RC oscillator."]
    Rc = 0,
    #[doc = "1: The timing domain slow clock, TD_SLCK, is generated by the 32.768 kHz crystal oscillator."]
    Cryst = 1,
}
impl From<Tdoscselselect> for bool {
    #[inline(always)]
    fn from(variant: Tdoscselselect) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `TDOSCSEL` reader - 32 kHz Oscillator Selection Status"]
pub type TdoscselR = crate::BitReader<Tdoscselselect>;
impl TdoscselR {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> Tdoscselselect {
        match self.bits {
            false => Tdoscselselect::Rc,
            true => Tdoscselselect::Cryst,
        }
    }
    #[doc = "The timing domain slow clock, TD_SLCK, is generated by the slow RC oscillator."]
    #[inline(always)]
    pub fn is_rc(&self) -> bool {
        *self == Tdoscselselect::Rc
    }
    #[doc = "The timing domain slow clock, TD_SLCK, is generated by the 32.768 kHz crystal oscillator."]
    #[inline(always)]
    pub fn is_cryst(&self) -> bool {
        *self == Tdoscselselect::Cryst
    }
}
impl R {
    #[doc = "Bit 3 - VDDCORE Supply Monitor Reset Status (cleared on read)"]
    #[inline(always)]
    pub fn corsmrsts(&self) -> CorsmrstsR {
        CorsmrstsR::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 7 - 32 kHz Oscillator Selection Status"]
    #[inline(always)]
    pub fn tdoscsel(&self) -> TdoscselR {
        TdoscselR::new(((self.bits >> 7) & 1) != 0)
    }
}
#[doc = "Supply Controller Status Register\n\nYou can [`read`](crate::Reg::read) this register and get [`sr::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct SrSpec;
impl crate::RegisterSpec for SrSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`sr::R`](R) reader structure"]
impl crate::Readable for SrSpec {}
#[doc = "`reset()` method sets SR to value 0"]
impl crate::Resettable for SrSpec {}
