#[doc = "Register `PWR` reader"]
pub type R = crate::R<PwrSpec>;
#[doc = "Register `PWR` writer"]
pub type W = crate::W<PwrSpec>;
#[doc = "Field `ZERO` reader - MD_SLCK always generated by the slow RC oscillator"]
pub type ZeroR = crate::BitReader;
#[doc = "Field `ZERO` writer - MD_SLCK always generated by the slow RC oscillator"]
pub type ZeroW<'a, REG> = crate::BitWriter<'a, REG>;
impl R {
    #[doc = "Bit 18 - MD_SLCK always generated by the slow RC oscillator"]
    #[inline(always)]
    pub fn zero(&self) -> ZeroR {
        ZeroR::new(((self.bits >> 18) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 18 - MD_SLCK always generated by the slow RC oscillator"]
    #[inline(always)]
    pub fn zero(&mut self) -> ZeroW<PwrSpec> {
        ZeroW::new(self, 18)
    }
}
#[doc = "Supply Controller Power Register\n\nYou can [`read`](crate::Reg::read) this register and get [`pwr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pwr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct PwrSpec;
impl crate::RegisterSpec for PwrSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`pwr::R`](R) reader structure"]
impl crate::Readable for PwrSpec {}
#[doc = "`write(|w| ..)` method takes [`pwr::W`](W) writer structure"]
impl crate::Writable for PwrSpec {
    type Safety = crate::Unsafe;
}
#[doc = "`reset()` method sets PWR to value 0"]
impl crate::Resettable for PwrSpec {}
